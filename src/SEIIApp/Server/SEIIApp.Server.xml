<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SEIIApp.Server</name>
    </assembly>
    <members>
        <member name="T:SEIIApp.Server.Controllers.AvatarController">
            <summary>
            Controller for avatars.
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Controllers.AvatarController.#ctor(SEIIApp.Server.Services.AvatarService,AutoMapper.IMapper)">
            <summary>
            Constructor.
            </summary>
            <param name="avatarService">Service for Avatars</param>
            <param name="mapper">Mapper</param>
        </member>
        <member name="M:SEIIApp.Server.Controllers.AvatarController.GetAvatarWithId(System.Int32)">
            <summary>
            Return the Avatar with the given UserId of a student.
            </summary>
            <param name="id">UserId of the student</param>
            <returns>The avatar of the specific student</returns>
        </member>
        <member name="M:SEIIApp.Server.Controllers.AvatarController.UpdateAvatar(System.Int32,SEIIApp.Shared.DomainDTOs.AvatarDto)">
            <summary>
            Update a avatar of specific student.
            </summary>
            <param name="id">UserId of the student</param>
            <param name="avatar">To update avatar</param>
            <returns>Updated avatar</returns>
        </member>
        <member name="T:SEIIApp.Server.Controllers.AvatarItemController">
            <summary>
            Controller for AvatarItems
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Controllers.AvatarItemController.#ctor(SEIIApp.Server.Services.AvatarItemService,AutoMapper.IMapper)">
            <summary>
            Constructor.
            </summary>
            <param name="avatarItemService">SServices for AvatarItems</param>
            <param name="mapper">Mapper</param>
        </member>
        <member name="M:SEIIApp.Server.Controllers.AvatarItemController.GetAllAvatarItems">
            <summary>
            Return all AvatarItems.
            </summary>
            <returns>All AvatarItems</returns>
        </member>
        <member name="T:SEIIApp.Server.Controllers.CorrectQuestionController">
            <summary>
            Controller for correctQuestions.
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Controllers.CorrectQuestionController.#ctor(SEIIApp.Server.Services.CorrectQuestionService,AutoMapper.IMapper)">
            <summary>
            Constructor.
            </summary>
            <param name="cqService">Service for CorrectQuestions</param>
            <param name="mapper">Mapper</param>
        </member>
        <member name="M:SEIIApp.Server.Controllers.CorrectQuestionController.GetCorrectQuestionsOfStudent(System.Int32)">
            <summary>
            Get all correctQuestions of a student.
            </summary>
            <param name="id">UserId of the student</param>
            <returns>All correctQuestions of the student</returns>
        </member>
        <member name="M:SEIIApp.Server.Controllers.CorrectQuestionController.AddCorrectQuestionToStudent(System.Int32,SEIIApp.Server.Domain.CorrectQuestion)">
            <summary>
            Add a correctQuestion to a student. The student gains experience, if a correctQuestion is added.
            </summary>
            <param name="id">UserId of the student</param>
            <param name="correctQuestion">CorrectQuestion to add</param>
            <returns>All correctQuestion of the student</returns>
        </member>
        <member name="T:SEIIApp.Server.Controllers.CourseController">
            <summary>
            Controller for Courses
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Controllers.CourseController.#ctor(SEIIApp.Server.Services.CourseService,AutoMapper.IMapper)">
            <summary>
            Constructor
            </summary>
            <param name="CourseService">Service for Courses</param>
            <param name="mapper">Mapper</param>
        </member>
        <member name="M:SEIIApp.Server.Controllers.CourseController.GetCourseWithId(System.Int32)">
            <summary>
            Return the Course with the given id.
            </summary>
            <param name="id"></param>
            <returns>>Http StatusCode, if ok CourseDto</returns>
        </member>
        <member name="M:SEIIApp.Server.Controllers.CourseController.GetAllCourses">
            <summary>
            Returns all Courses.
            </summary>
            <returns>>Http StatusCode, if ok CourseDto array</returns>
        </member>
        <member name="T:SEIIApp.Server.Controllers.LessonController">
            <summary>
            Controller for Lessons.
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Controllers.LessonController.#ctor(SEIIApp.Server.Services.LessonService,AutoMapper.IMapper)">
            <summary>
            Constructor.
            </summary>
            <param name="lessonService">Service for lessons</param>
            <param name="mapper">Mapper</param>
        </member>
        <member name="M:SEIIApp.Server.Controllers.LessonController.GetLessonWithId(System.Int32)">
            <summary>
            Return the Lesson with the given id.
            </summary>
            <param name="id"></param>
            <returns>Http StatusCode, if ok LessonDto</returns>
        </member>
        <member name="M:SEIIApp.Server.Controllers.LessonController.GetAllLesson">
            <summary>
            Returns all Lessons.
            </summary>
            <returns>>Http StatusCode, if ok LessonDto array</returns>
        </member>
        <member name="T:SEIIApp.Server.Controllers.QuizController">
            <summary>
            Controller for Quizzes
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Controllers.QuizController.#ctor(SEIIApp.Server.Services.QuizService,SEIIApp.Server.Services.LessonService,AutoMapper.IMapper)">
            <summary>
            Constructor.
            </summary>
            <param name="quizService">Service for Quizzes</param>
            <param name="lessonService">Service for Lessons</param>
            <param name="mapper">Mapper</param>
        </member>
        <member name="M:SEIIApp.Server.Controllers.QuizController.GetQuizWithId(System.Int32)">
            <summary>
            Return the Quiz with the given id.
            </summary>
            <param name="id">Quiz id</param>
            <returns>Http StatusCodes, if ok QuizDto</returns>
        </member>
        <member name="M:SEIIApp.Server.Controllers.QuizController.GetAllQuizzes">
            <summary>
            Returns all Quizs.
            </summary>
            <returns>Http StatusCodes, if ok QuizDto array</returns>
        </member>
        <member name="M:SEIIApp.Server.Controllers.QuizController.GetAllQuizzesOfLesson(System.Int32)">
            <summary>
            Get all Quizzes of a specific lesson.
            </summary>
            <param name="lessonId"></param>
            <returns>Http StatusCodes, if ok QuizDto array</returns>
        </member>
        <member name="T:SEIIApp.Server.Controllers.StudentController">
            <summary>
            Controller for Students.
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Controllers.StudentController.#ctor(SEIIApp.Server.Services.StudentService,SEIIApp.Server.Services.FinishedQuizService,AutoMapper.IMapper)">
            <summary>
            Constructor.
            </summary>
            <param name="studentService">Service for Students</param>
            <param name="finishedQuizService">Service for finished quizzes</param>
            <param name="mapper">Mapper</param>
        </member>
        <member name="M:SEIIApp.Server.Controllers.StudentController.GetStudentWithId(System.Int32)">
            <summary>
            Return the Student with the given id.
            </summary>
            <param name="id">Id of the student</param>
            <returns>Http StatusCode, if ok the student as dto</returns>
        </member>
        <member name="M:SEIIApp.Server.Controllers.StudentController.GetAllStudents">
            <summary>
            Returns all Students.
            </summary>
            <returns>Http StatusCode, if ok the students as dto array</returns>
        </member>
        <member name="M:SEIIApp.Server.Controllers.StudentController.AddFinishedQuizToStudent(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a finished quiz to an student.
            If now the lesson is finished, then the lessons is also added to the student.
            If now the course is finished, then the cours is also added to the student.
            </summary>
            <param name="userId">Id of the student</param>
            <param name="courseId">Course Id</param>
            <param name="lessonId">Lesson Id</param>
            <param name="quizId">Quiz Id</param>
            <returns>Http ok</returns>
        </member>
        <member name="M:SEIIApp.Server.DataAccess.ContentData.GenerateData(SEIIApp.Server.DataAccess.DatabaseContext)">
            <summary>
            Initialize data for local-in-memory database.
            </summary>
            <param name="db">Database context</param>
        </member>
        <member name="T:SEIIApp.Server.DataAccess.DatabaseContext">
            <summary>
            Database Context.
            </summary>
        </member>
        <member name="M:SEIIApp.Server.DataAccess.DatabaseContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{SEIIApp.Server.DataAccess.DatabaseContext})">
            <summary>
            Contructor.
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:SEIIApp.Server.Domain.DomainMapper">
            <summary>
            Mapper profiles.
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Domain.DomainMapper.#ctor">
            <summary>
            Conrstructor with all profiles.
            </summary>
        </member>
        <member name="T:SEIIApp.Server.Services.AvatarItemService">
            <summary>
            Service for AvatarItems.
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Services.AvatarItemService.#ctor(SEIIApp.Server.DataAccess.DatabaseContext)">
            <summary>
            Constructor
            </summary>
            <param name="db">Database Context</param>
        </member>
        <member name="M:SEIIApp.Server.Services.AvatarItemService.GetAllAvatarItems">
            <summary>
            Returns all items.
            </summary>
        </member>
        <member name="T:SEIIApp.Server.Services.AvatarService">
            <summary>
            Service for avatars.
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Services.AvatarService.#ctor(SEIIApp.Server.DataAccess.DatabaseContext)">
            <summary>
            Constructor.
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:SEIIApp.Server.Services.AvatarService.GetAvatarWithId(System.Int32)">
            <summary>
            Get the avatar of a specific student.
            </summary>
            <param name="userId">UserId of the specific student</param>
            <returns>The avatar of the specific student</returns>
        </member>
        <member name="M:SEIIApp.Server.Services.AvatarService.UpdateAvatar(System.Int32,SEIIApp.Server.Domain.Avatar)">
            <summary>
            Update the avatar of a specific student.
            </summary>
            <param name="userId">UserId of the specific student</param>
            <param name="avatar">The new avatar</param>
            <returns>The updated avatar</returns>
        </member>
        <member name="T:SEIIApp.Server.Services.CorrectQuestionService">
            <summary>
            Service for correctQuestions.
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Services.CorrectQuestionService.#ctor(SEIIApp.Server.DataAccess.DatabaseContext)">
            <summary>
            Contstructor.
            </summary>
            <param name="databaseContext"></param>
        </member>
        <member name="M:SEIIApp.Server.Services.CorrectQuestionService.GetCorrectQuestionsOfStudent(System.Int32)">
            <summary>
            Get all correctQuestion of a student.
            </summary>
            <param name="userId">UserId of the student</param>
            <returns>All correctQuestion of the student</returns>
        </member>
        <member name="M:SEIIApp.Server.Services.CorrectQuestionService.AddCorrectQuestionToStudent(System.Int32,SEIIApp.Server.Domain.CorrectQuestion)">
            <summary>
            Add a correctQuestion to a student.
            </summary>
            <param name="userId">UserId of the student</param>
            <param name="correctQuestion">The correctQuestion to add</param>
            <returns>All correctQuestion of the student</returns>
        </member>
        <member name="T:SEIIApp.Server.Services.CourseService">
            <summary>
            Service for Courses.
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Services.CourseService.#ctor(SEIIApp.Server.DataAccess.DatabaseContext)">
            <summary>
            Constructor
            </summary>
            <param name="db">Database Context</param>
        </member>
        <member name="M:SEIIApp.Server.Services.CourseService.GetAllCourses">
            <summary>
            Returns all courses.
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Services.CourseService.GetCourseWithId(System.Int32)">
            <summary>
            Returns the course with the given courseId.
            </summary>
        </member>
        <member name="T:SEIIApp.Server.Services.FinishedQuizService">
            <summary>
            Service for finishedQuizzes.
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Services.FinishedQuizService.#ctor(SEIIApp.Server.DataAccess.DatabaseContext)">
            <summary>
            Constructor.
            </summary>
            <param name="databaseContext">Database Context</param>
        </member>
        <member name="M:SEIIApp.Server.Services.FinishedQuizService.AddFinishedQuizToStudent(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a finished Quiz to a student and, if the lesson or, the lesson and the course, is finished too, add them also.
            </summary>
            <param name="userId"></param>
            <param name="courseId"></param>
            <param name="lessonId"></param>
            <param name="quizId"></param>
            <returns>True</returns>
        </member>
        <member name="T:SEIIApp.Server.Services.LessonService">
            <summary>
            Service for Lessons.
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Services.LessonService.#ctor(SEIIApp.Server.DataAccess.DatabaseContext)">
            <summary>
            Constructor.
            </summary>
            <param name="db">Database Context</param>
        </member>
        <member name="M:SEIIApp.Server.Services.LessonService.GetAllLesson">
            <summary>
            Returns all lessons.
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Services.LessonService.GetLessonWithId(System.Int32)">
            <summary>
            Returns the lesson with the given id.
            </summary>
        </member>
        <member name="T:SEIIApp.Server.Services.QuizService">
            <summary>
            Service for Quizzes.
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Services.QuizService.#ctor(SEIIApp.Server.DataAccess.DatabaseContext)">
            <summary>
            Constructor.
            </summary>
            <param name="db">Database Context</param>
        </member>
        <member name="M:SEIIApp.Server.Services.QuizService.GetAllQuizzes">
            <summary>
            Returns all quizzes.
            </summary>
            <returns>All quizzes</returns>
        </member>
        <member name="M:SEIIApp.Server.Services.QuizService.GetQuizWithId(System.Int32)">
            <summary>
            Returns the quiz with the given quizId.
            </summary>
            <param name="quizId">Id of the quiz</param>
            <returns>Quiz with the given quizId</returns>
        </member>
        <member name="T:SEIIApp.Server.Services.StudentService">
            <summary>
            Service for student.
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Services.StudentService.#ctor(SEIIApp.Server.DataAccess.DatabaseContext,AutoMapper.IMapper,SEIIApp.Server.Services.CorrectQuestionService)">
            <summary>
            Constructor.
            </summary>
            <param name="db"></param>
            <param name="mapper"></param>
            <param name="cqs"></param>
        </member>
        <member name="M:SEIIApp.Server.Services.StudentService.GetAllStudents">
            <summary>
            Gets all students.
            </summary>
            <returns>All students</returns>
        </member>
        <member name="M:SEIIApp.Server.Services.StudentService.GetStudentWithId(System.Int32)">
            <summary>
            Gets the specified student.
            </summary>
            <param name="userId"></param>
            <returns>Specified Student</returns>
        </member>
        <member name="M:SEIIApp.Server.Services.StudentService.UpdateStudent(SEIIApp.Server.Domain.Student)">
            <summary>
            Updates given student.
            </summary>
            <param name="student">To update student</param>
            <returns>Updated student</returns>
        </member>
        <member name="T:SEIIApp.Server.Startup">
            <summary>
            Startup of the webapp.
            </summary>
        </member>
        <member name="M:SEIIApp.Server.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor.
            </summary>
            <param name="configuration"></param>
        </member>
    </members>
</doc>
