@page "/courses/{CourseId:int}/{LessonId:int}/{QuizId:int}"
@page "/quiz/{QuizId:int}"

@using Blazorise
@using SEIIApp.Shared.DomainDTOs

@inject HttpClient Http
@inject NavigationManager NavigationManager

<head>
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css" integrity="sha384-oS3vJWv+0UjzBfQzYUhtDYW+Pj2yciDJxpsK1OYPAYjqT085Qq/1cq5FLXAZQ7Ay" crossorigin="anonymous">
</head>

<body>
<center>

    @if (quizzes == null)
    {
        <h1>Loading Quiz...</h1>
    }

    else
    {

        if (!startedQuiz)
        {

            <h1>Quiz: @quiz.Title</h1>

            <br /> <br />

            <h4>You have done this Quiz X times</h4>

            <br /> <br />

            <h4>You have not successfully completed this Quiz yet</h4>

            <br /> <br /> <br /> <br />

            <p><button class="startQuizButton" @onclick="@(() => startQuiz())">Start Quiz</button></p>

            <br /> <br />
        }
        else
        {

            if (!finishedQuiz)
            {

                <h7>@(qCounter + 1)/@questions.Length</h7>

                <Progress>
                    <ProgressBar Background="Background.Success" Value="@progress" Animated=true />
                    <ProgressBar Background="Background.Secondary" Value=@(100 - progress) Animated=true />
                </Progress>

                <br /> <br />

                <h1>Question @(qCounter + 1): @questions[qCounter].Text</h1>

                <br /> <br />

            


                       <center>
                           <ul class="list">

                               @foreach (var answer in @questions[qCounter].answers)
                               {

                                   <li class="list-item">
                                       <div class="list-content">
                                           <button class="@answer.Color" @onclick="@(() => questions[qCounter].anythingSelected(answer) )">@answer.Text</button>
                                       </div>
                                   </li>

                               }

                           </ul>

                       </center>


                <p>
                    <h7 class="@expStatus"><b>You have just earned 10 EXP</b></h7>
                </p>

                <button class="@questions[qCounter].check.Color" @onclick="@(() => checkMe(questions[qCounter]) )">@questions[qCounter].check.Text</button>

                
                <br /> <br /> 

            }
            else
            {

                bool everythingCorrect = true;

                foreach (bool b in results)
                {
                    if (b == false)
                    {
                        everythingCorrect = false;
                    }
                }

                if (everythingCorrect)
                {
                    <h2> Congratulations! You have successfully completed this Quiz.</h2>
                }
                else
                {
                    <h2>You didn't successfully complete this Quiz. Try better next time.</h2>
                }

                <br /> <br />

                <h3>Your Results for Quiz: @quiz.Title</h3>
                <h5>Tap on an individual result to view details</h5>

                <br /> <br />


                for (int i = 0; i < results.Length; i++)
                {
                    if (results[i] == true)
                    {


                        <section class="accordion">
                            <input type="checkbox" name="collapse" id="handle@(i+1)">
                            <h2 class="handle">
                                <label for="handle@(i+1)">Question @(i+1): Correct</label>
                            </h2>
                            <div class="content">
                                <p><strong>Question:</strong> @questions[i].Text</p>
                                <p><strong style="color:green">Your correct answer:</strong> @correctAnswerTexts[i]</p>
                            </div>
                        </section>
                    }
                    else
                    {


                        <section class="accordion">
                            <input type="checkbox" name="collapse" id="handle@(i+1)">
                            <h2 class="handle">
                                <label for="handle@(i+1)">Question @(i+1): Incorrect</label>
                            </h2>
                            <div class="content">
                                <p><strong>Question:</strong> @questions[i].Text</p>
                                <p><strong style="color:red">Your answer:</strong> @selectedAnswerTexts[i]</p>
                                <p><strong style="color:green">Correct Answer:</strong> @correctAnswerTexts[i]</p>

                            </div>
                        </section>
                    }
                }

                <br />

                <p><button class="startQuizButton" @onclick="@(() => returnToLesson())">Return to Lesson</button></p>

                <br /> <br /> 


            }

            
        }

    }

</center>
</body>





@code {

    [Parameter]
    public int CourseId { get; set; }
    [Parameter]
    public int LessonId { get; set; }
    [Parameter]
    public int QuizId { get; set; }

    public QuizDto[] quizzes;
    public QuizDto quiz;

    //Wrapped questionset of current quiz
    public QuestionPackage[] questions;

    public StudentDto student;

    //Counter indicating the current question
    public int qCounter = 0;


    //Value by which the progress bar increases
    public int progressFactor = 0;
    //Current progress of progress bar
    public int progress = 0;

    //Protocolling of users answers/results
    public bool[] results;
    public string[] selectedAnswerTexts;
    public string[] correctAnswerTexts;

    //UI-status-indicators
    public bool startedQuiz = false;
    public bool finishedQuiz = false;
    public String expStatus = "ExpInvisible";


    protected override async Task OnInitializedAsync()
    {
        quizzes = await Http.GetFromJsonAsync<QuizDto[]>("api/Quizzes");

        foreach (QuizDto q in quizzes)
        {
            if (q.QuizId == QuizId)
            {
                quiz = q;
            }
        }

        questions = QuestionPackage.transformQuestions(quiz.Questions);

        progressFactor = 100 / questions.Length;

        results = new bool[questions.Length];
        selectedAnswerTexts = new string[questions.Length];
        correctAnswerTexts = new string[questions.Length];

        //ToDo: Change userId to variable
        student = await Http.GetFromJsonAsync<StudentDto>($"api/Students/{1}");

    }


    public void startQuiz()
    {
        startedQuiz = true;
    }

    public void finishQuiz()
    {
        finishedQuiz = true;
    }

    public void returnToLesson()
    {
        string uri = $"courses/{CourseId}/{LessonId}";
        NavigationManager.NavigateTo(uri);
    }


    //Interaction with Check Button
    public async void checkMe(QuestionPackage question)
    {
        if (question.check.Color == "checkReady")
        {
            if (question.checkSelection() == "correct")
            {
                question.check.Text = "Correct, Continue";
                question.check.Color = "checkCorrect";
                results[qCounter] = true;

                //Sets color of correct answer to green
                foreach (AnswerPackage ans in question.answers)
                {
                    if (ans.Correct)
                    {
                        ans.Color = "correctAnswer";

                        correctAnswerTexts[qCounter] = ans.Text;
                        selectedAnswerTexts[qCounter] = ans.Text;
                    }
                }

                //Save new correct Questions to Student's profile

                bool studentAlreadyAnsweredCorrectly = false;

                foreach (CorrectQuestionDto coquest in student.CorrectQuestions)
                {
                    if (coquest.QuestionsId == question.ID)
                    {
                        studentAlreadyAnsweredCorrectly = true;
                    }
                }

                if (!studentAlreadyAnsweredCorrectly)
                {
                    CorrectQuestionDto newCorrect = new CorrectQuestionDto();
                    newCorrect.QuestionsId = question.ID;
                    student.CorrectQuestions.Add(newCorrect);

                    expStatus = "ExpVisible";

                    await Http.PutAsJsonAsync<CorrectQuestionDto>($"api/CorrectQuestions/{student.UserId}", newCorrect);
                }




            }
            else if (question.checkSelection() == "incorrect")
            {
                question.check.Text = "Incorrect, Continue";
                question.check.Color = "checkIncorrect";
                results[qCounter] = false;

                //Set Colors for wrong and correct answer buttons
                foreach (AnswerPackage ans in question.answers)
                {
                    if (ans.Selected)
                    {
                        ans.Color = "wrongAnswer";

                        selectedAnswerTexts[qCounter] = ans.Text;
                    }

                    if (ans.Correct)
                    {
                        ans.Color = "correctAnswerWouldHaveBeen";
                        correctAnswerTexts[qCounter] = ans.Text;
                    }
                }

            }
            else if (question.checkSelection() == "error")
            {
                return;
            }
        }
        else if (question.check.Color == "checkCorrect" || question.check.Color == "checkIncorrect")
        {
            //Hide EXP-Notification for next question
            expStatus = "ExpInvisible";

            if (qCounter < questions.Length - 1)
            {
                qCounter++;
                progress += progressFactor;

            }
            else if (qCounter == questions.Length - 1)
            {
                progress = 100;

                //Delay process to finish progress bar animation
                await Task.Delay(1000).ContinueWith(t =>
                {
                    finishQuiz();

                    StateHasChanged();
                });

            }

        }
    }


    //UI-compliant wrapped Question
    public class QuestionPackage
    {

        public QuestionDto initialQuestion;

        public int ID { get; set; }
        public string Text { get; set; }
        public List<AnswerPackage> answers { get; set; }
        public Check check { get; set; } = new Check { Text = "Check" };


        public QuestionPackage(QuestionDto question)
        {
            this.initialQuestion = question;

            this.ID = question.QuestionId;
            this.Text = question.QuestionText;
            this.answers = AnswerPackage.transformAnswers(question.Answers);
        }


        //Wrap QuestionDto set in UI-compliant QuestionPackage set
        public static QuestionPackage[] transformQuestions(List<QuestionDto> questions)
        {
            List<QuestionPackage> newQuestions = new List<QuestionPackage>();

            foreach (QuestionDto quest in questions)
            {
                newQuestions.Add(new QuestionPackage(quest));
            }

            return newQuestions.ToArray();
        }


        //Interaction with answer buttons (Selecting and Unselecting answers and setting Check Button to ready/not ready)
        public void anythingSelected(AnswerPackage answer)
        {

            //Blocks interaction with answer buttons when the question has already been checked
            if (check.Color == "checkCorrect" || check.Color == "checkIncorrect")
            {
                return;
            }

            AnswerPackage ans = answer;

            //Check if any other answers than the clicked one are selected and unchecks them
            foreach (var a in answers)
            {
                if (a != ans && a.Selected)
                {
                    a.pressed();
                }
            }

            // (Un-) Select clicked on answer
            ans.pressed();

            bool selectionTest = false;

            //Check if any answers have been selected
            foreach (var a in answers)
            {
                if (a.Selected)
                {
                    selectionTest = true;
                }
            }

            //Set Check-Button to ready if an answer is selected
            if (selectionTest)
            {
                this.check.setReady(true);
            }
            else
            {
                this.check.setReady(false);
            }


        }


        //Check if selected answers are correct
        public string checkSelection()
        {
            AnswerPackage ans = null;
            bool selectionTest = false;

            foreach (var a in answers)
            {
                if (a.Selected)
                {
                    selectionTest = true;
                    ans = a;
                }
            }

            if (selectionTest && ans != null)
            {
                if (ans.Correct)
                {
                    return "correct";
                }
                else
                {
                    return "incorrect";
                }
            }
            else
            {
                return "error";
            }

        }
    }


    //UI-compliant wrapped Answer
    public class AnswerPackage
    {
        public int ID { get; set; }
        public string Text { get; set; }
        public bool Correct { get; set; }
        public bool Selected { get; set; } = false;
        public string Color { get; set; } = "unselected";


        public AnswerPackage(AnswerDto answer)
        {
            this.ID = answer.Id;
            this.Text = answer.AnswerText;
            this.Correct = answer.Correct;
        }

        //Set answer button color to selected or unselected
        public void pressed()
        {
            this.Selected = !Selected;

            if (this.Selected)
            {
                this.Color = "selected";
            }
            else
            {
                this.Color = "unselected";
            }

        }

        //Wrap AnswerDto set in UI-compliant AnswerPackage set
        public static List<AnswerPackage> transformAnswers(List<AnswerDto> answers)
        {
            List<AnswerPackage> newAnswers = new List<AnswerPackage>();

            foreach (AnswerDto ans in answers)
            {
                newAnswers.Add(new AnswerPackage(ans));
            }

            return newAnswers;
        }
    }


    public class Check
    {
        public string Text { get; set; }
        public bool Ready { get; set; } = false;
        public string Color { get; set; } = "checkNotReady";

        //Set Check button to (not) ready
        public void setReady(bool ready)
        {
            this.Ready = ready;

            if (ready == true)
            {
                this.Color = "checkReady";
            }
            else if (ready == false)
            {
                this.Color = "checkNotReady";
            }
        }

    }

  }





<style>

    .startQuizButton {
        color: black;
        background: lightblue;
        border: black;
        width: 300px;
        height: 75px;
        border-radius: 12px;
    }

    .answerTable {
        width: 70%;
        max-height: 70px;
        table-layout: fixed;
        border-collapse: collapse;
        background-color: white;
    }


    .unselected {
        color: white;
        background: grey;
        border: black;
        width: 100%;
        height: 100%;
        min-height: 50px;
        border-radius: 12px;
    }

    .selected {
        color: white;
        background: blue;
        border: black;
        width: 100%;
        height: 100%;
        min-height: 50px;
        border-radius: 12px;
    }

    .correctAnswer {
        color: black;
        background: lightgreen;
        opacity: 0.8;
        border: black;
        width: 100%;
        height: 100%;
        min-height: 50px;
        border-radius: 12px;
    }

    .wrongAnswer {
        color: white;
        background: red;
        opacity: 0.8;
        border: black;
        width: 100%;
        height: 100%;
        min-height: 50px;
        border-radius: 12px;
    }

    .correctAnswerWouldHaveBeen {
        color: black;
        background: lightgreen;
        opacity: 0.8;
        border: black;
        width: 100%;
        height: 100%;
        min-height: 50px;
        border-radius: 12px;
        animation-name: blink;
        animation-duration: 0.5s;
        animation-iteration-count: 2;
    }

    @@keyframes blink {
        0% {
            color: white;
            background: grey;
            opacity: 1.0;
        }

        50% {
            color: black;
            background: lightgreen;
            opacity 0.8;
        }

        100% {
            color: white;
            background: grey;
            opacity: 1.0;
        }
    }


    .checkReady {
        color: white;
        background: lightgreen;
        border: black;
        width: 100px;
        height: 50px;
        border-radius: 12px;
    }

    .checkNotReady {
        color: white;
        background: lightgrey;
        border: black;
        width: 100px;
        height: 50px;
        border-radius: 12px;
    }

    .checkCorrect {
        color: white;
        background: green;
        border: black;
        width: 200px;
        height: 50px;
        border-radius: 12px;
    }

    .checkIncorrect {
        color: white;
        background: red;
        border: black;
        width: 200px;
        height: 50px;
        border-radius: 12px;
    }

    .ExpInvisible {
        visibility: hidden;
    }

    .ExpVisible {
        color: green;
        visibility: visible;
    }


    .list {
        display: grid;
        overflow: hidden;
        grid-template-columns: 1fr, 1fr;
        grid-auto-rows: 1fr;
        grid-column-gap: 5px;
        grid-row-gap: 5px;
        max-width: 500px;
        list-style-type: none; /* Remove bullets */
        padding: 0; /* Remove padding */
        margin: 0; /* Remove margins */
    }

    .list-item {
        background-color: white;
        display: flex;
        margin-bottom: 20px;
        width: 100%;
    }

    .list-content {
        width: 100%;
    }



    .accordion > input[type="checkbox"] {
        position: absolute;
        left: -100vw;
    }

    .accordion .content {
        overflow-y: hidden;
        height: 0;
        transition: height 0.3s ease;
        text-align: left;
    }

    .accordion > input[type="checkbox"]:checked ~ .content {
        height: auto;
        overflow: visible;
    }

    .accordion label {
        display: block;
        text-align: left;
    }

    .accordion {
        margin-bottom: 1em;
    }

        .accordion > input[type="checkbox"]:checked ~ .content {
            padding: 15px;
            border: 1px solid #e8e8e8;
            border-top: 0;
        }

        .accordion .handle {
            margin: 0;
            font-size: 1.125em;
            line-height: 1.2em;
        }

        .accordion label {
            color: #333;
            cursor: pointer;
            font-weight: normal;
            padding: 15px;
            background: #e8e8e8;
        }

            .accordion label:hover,
            .accordion label:focus {
                background: #d8d8d8;
            }

        .accordion .handle label:before {
            font-family: "Font Awesome 5 Free";
            content: '\f054';
            font-weight: bold;
            font-size: 22px;
            display: inline-block;
            margin-right: 10px;
            font-size: .58em;
            line-height: 1.556em;
            vertical-align: middle;
        }

        .accordion > input[type="checkbox"]:checked ~ .handle label:before {
            content: "\f078";
        }



    body {
        
        font: 16px/1.5em "Overpass", "Open Sans", Helvetica, sans-serif;
        font-weight: 300;
    }

    p {
        margin: 0 0 1em;
    }

    .accordion {
        max-width: 65em;
    }

        .accordion p:last-child {
            margin-bottom: 0;
        }

</style>
