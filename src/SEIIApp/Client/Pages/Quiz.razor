@page "/courses/{CourseId:int}/{LessonId:int}/{QuizId:int}"
@page "/quiz/{QuizId:int}"

@using Blazorise
@using SEIIApp.Shared.DomainDTOs

@inject HttpClient Http
@inject NavigationManager NavigationManager

<head>
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css" integrity="sha384-oS3vJWv+0UjzBfQzYUhtDYW+Pj2yciDJxpsK1OYPAYjqT085Qq/1cq5FLXAZQ7Ay" crossorigin="anonymous">
    <link rel="stylesheet" href="../css/StylesheetJimmaNeo.css">
</head>

<center>

    @if (CurrentQuiz == null)
    {
        <h3>Loading Quiz...</h3>
    }

    else
    {

        if (!StartedQuiz)
        {

            <h2>Quiz: @CurrentQuiz.Title</h2>

            <br />

            <h4>Number of questions: @Questions.Length</h4>

            <br /> <br />

            @if (QuizAlreadyCompleted)
            {
                <h4>You have already completed this Quiz successfully</h4>
            }
            else
            {
                <h4>You have not successfully completed this Quiz yet</h4>
            }

            <br /> <br />

            <p><button class="startQuizButton" @onclick="@(() => StartQuiz())">Start Quiz</button></p>

            <br /> <br />

        }

        else
        {

            if (!FinishedQuiz)
            {

                <h7>@(QuestionCounter + 1)/@Questions.Length</h7>

                <Progress>
                    <ProgressBar Background="Background.Success" Value="@Progress" Animated=true />
                    <ProgressBar Background="Background.Dark" Value=@(100 - Progress) Animated=true />
                </Progress>

                <br /> 

                <Alert Color="Color.Success" @bind-Visible="@ShowLevelUpAlert" class="levelUpAlert">
                    <Heading Size="HeadingSize.Is4" class="levelUpHeader">
                        LEVEL UP
                    </Heading>
                    <AlertMessage class="levelUpText">
                        Well done! You have just reached level 5
                    </AlertMessage>
                </Alert>

                <br />

                <h2>Question @(QuestionCounter + 1): @Questions[QuestionCounter].Text</h2>

                <br /> <br />

                       <center>
                           <ul class="answer-list">

                               @foreach (var answer in @Questions[QuestionCounter].Answers)
                               {

                                   <li class="answer-list-item">
                                       <div class="answer-list-content">
                                           <button class="@answer.Color" @onclick="@(() => Questions[QuestionCounter].AnythingSelected(answer) )">@answer.Text</button>
                                       </div>
                                   </li>

                               }

                           </ul>
                       </center>

                <p>
                    <h6 class="@ExpStatus"><b style="color:green">You have just earned 10 EXP</b></h6>
                </p>

                <button class="@Questions[QuestionCounter].Check.Color" @onclick="@(() => CheckMe(Questions[QuestionCounter]) )">@Questions[QuestionCounter].Check.Text</button>
                
                <br /> <br />

            }

            else
            {

                if (EverythingCorrect())
                {
                    <h2> Congratulations! You have successfully completed this Quiz.</h2>

                    SaveFinishedQuizToStudent();
                }

                else
                {
                    <h2>You didn't successfully complete this Quiz. Try better next time.</h2>
                }

                <br /> <br />

                <h3>Your Results for Quiz: @CurrentQuiz.Title</h3>
                <h5>Tap on an individual result to view details</h5>

                <br /> <br />

                for (int i = 0; i < Results.Length; i++)
                {
                    if (Results[i] == true)
                    {

                        <section class="accordion-correction">
                            <input type="checkbox" name="collapse" id="handle@(i+1)">
                            <h2 class="handle">
                                <label for="handle@(i+1)">Question @(i+1): Correct</label>
                            </h2>
                            <div class="content">
                                <p class="pCorrection"><strong>Question:</strong> @Questions[i].Text</p>
                                <p class="pCorrection"><strong style="color:green">Your correct answer:</strong> @CorrectAnswerTexts[i]</p>
                            </div>
                        </section>

                    }

                    else
                    {

                        <section class="accordion-correction">
                            <input type="checkbox" name="collapse" id="handle@(i+1)">
                            <h2 class="handle">
                                <label for="handle@(i+1)">Question @(i+1): Incorrect</label>
                            </h2>
                            <div class="content">
                                <p class="pCorrection"><strong>Question:</strong> @Questions[i].Text</p>
                                <p class="pCorrection"><strong style="color:red">Your answer:</strong> @SelectedAnswerTexts[i]</p>
                                <p class="pCorrection"><strong style="color:green">Correct Answer:</strong> @CorrectAnswerTexts[i]</p>

                            </div>
                        </section>

                    }
                }

                <br />

                <p><button class="startQuizButton" @onclick="@(() => ReturnToLesson())">Return to Lesson</button></p>

                <br /> <br /> 

            }

        }

    }

</center>





@code {

    // Parameters for current path
    [Parameter]
    public int CourseId { get; set; }
    [Parameter]
    public int LessonId { get; set; }
    [Parameter]
    public int QuizId { get; set; }

    // Current quiz
    public QuizDto CurrentQuiz;

    // Wrapped questionset of current quiz
    public QuestionPackage[] Questions;

    // Reference to currently active student
    public StudentDto Student;

    // Counter indicating the current question in quiz
    public int QuestionCounter = 0;

    // Value by which the progress bar increases
    public int ProgressFactor = 0;

    // Current progress of progress bar
    public int Progress = 0;

    // Protocolling of users answers/results
    public bool[] Results;
    public string[] SelectedAnswerTexts;
    public string[] CorrectAnswerTexts;

    // Status to check if current quiz has already been completed
    public bool QuizAlreadyCompleted = false;

    // UI-status indicators
    public bool StartedQuiz = false;
    public bool FinishedQuiz = false;
    public String ExpStatus = "ExpInvisible";

    // Status of Level-Up Alert visibility
    public bool ShowLevelUpAlert = false;


    protected override async Task OnInitializedAsync()
    {
        QuizDto[] allQuizzes = await Http.GetFromJsonAsync<QuizDto[]>("api/Quizzes");

        // Get requested quiz out of all quizzes
        foreach (QuizDto quiz in allQuizzes)
        {
            if (quiz.QuizId == QuizId)
            {
                CurrentQuiz = quiz;
            }
        }

        Questions = QuestionPackage.TransformQuestions(CurrentQuiz.Questions);

        ProgressFactor = 100 / Questions.Length;

        Results = new bool[Questions.Length];
        SelectedAnswerTexts = new string[Questions.Length];
        CorrectAnswerTexts = new string[Questions.Length];

        // Get currently active student
        Student = await Http.GetFromJsonAsync<StudentDto>($"api/Students/{1}");

        // Check at Startup Page if quiz has already been completed
        QuizAlreadyCompleted = CheckIfAlreadyCompleted();

    }


    public void StartQuiz()
    {
        StartedQuiz = true;
    }

    public void FinishQuiz()
    {
        FinishedQuiz = true;
    }

    // Return from Quiz to associated lesson
    public void ReturnToLesson()
    {
        string uri = $"courses/{CourseId}/{LessonId}";
        NavigationManager.NavigateTo(uri);
    }


    // Check if Quiz has already been completed by student
    public bool CheckIfAlreadyCompleted()
    {
        bool status = false;

        foreach (FinishedQuizDto finishedQuiz in Student.FinishedQuizzes)
        {
            if (finishedQuiz.QuizId == CurrentQuiz.QuizId)
            {
                status = true;
            }
        }

        return status;
    }


    // Check if all questions have been answered correctly
    public bool EverythingCorrect()
    {
        bool status = true;

        foreach (bool questionResult in Results)
        {
            if (questionResult == false)
            {
                status = false;
            }
        }

        return status;
    }


    /// <summary>
    /// Interaction with Check Button in different modes
    /// </summary>
    /// <param name="activeQuestion">Current question</param>
    /// <returns></returns>
    public async void CheckMe(QuestionPackage activeQuestion)
    {
        // Mode: question has been requested to check
        if (activeQuestion.Check.Color == "checkReady")
        {
            evaluateAnswer(activeQuestion);
        }

        // Mode: student wants get next question or end quiz after previous evaluation
        else if (activeQuestion.Check.Color == "checkCorrect" || activeQuestion.Check.Color == "checkIncorrect")
        {
            // Hide EXP-Notification for next question
            ExpStatus = "ExpInvisible";

            // Hide Level-Up Alert
            ShowLevelUpAlert = false;

            if (QuestionCounter < Questions.Length - 1)
            {
                QuestionCounter++;
                Progress += ProgressFactor;

            }

            else if (QuestionCounter == Questions.Length - 1)
            {
                Progress = 100;

                // Delay process to finish final progress bar animation
                await Task.Delay(1000).ContinueWith(t =>
                {
                    FinishQuiz();

                    StateHasChanged();
                });

            }
        }
    }


    /// <summary>
    /// Evaluation of selected answer for current question
    /// </summary>
    /// <param name="activeQuestion">Current question</param>
    /// <returns></returns>
    public async void evaluateAnswer(QuestionPackage activeQuestion)
    {
        // Action if current question was answered correctly
        if (activeQuestion.CheckSelection() == "correct")
        {
            activeQuestion.Check.Text = "Correct, Continue";
            activeQuestion.Check.Color = "checkCorrect";
            Results[QuestionCounter] = true;

            // Sets color of correct answer to green
            foreach (AnswerPackage answer in activeQuestion.Answers)
            {
                if (answer.Correct)
                {
                    answer.Color = "correctAnswer";

                    CorrectAnswerTexts[QuestionCounter] = answer.Text;
                    SelectedAnswerTexts[QuestionCounter] = answer.Text;
                }
            }

            // Save new correct Questions to Student's profile

            bool studentAlreadyAnsweredCorrectly = false;

            foreach (CorrectQuestionDto correctQuestion in Student.CorrectQuestions)
            {
                if (correctQuestion.QuestionsId == activeQuestion.ID)
                {
                    studentAlreadyAnsweredCorrectly = true;
                }
            }

            if (!studentAlreadyAnsweredCorrectly)
            {
                CorrectQuestionDto newCorrect = new CorrectQuestionDto();
                newCorrect.QuestionsId = activeQuestion.ID;
                Student.CorrectQuestions.Add(newCorrect);

                ExpStatus = "ExpVisible";

                // Level-Up currently set to the penultimate question of a quiz
                if (Questions.Length > 1 && QuestionCounter == Questions.Length - 2)
                {
                    ShowLevelUpAlert = true;
                }

                await Http.PutAsJsonAsync<CorrectQuestionDto>($"api/CorrectQuestions/{Student.UserId}", newCorrect);
            }

        }

        // Action if current question was not answered correctly
        else if (activeQuestion.CheckSelection() == "incorrect")
        {
            activeQuestion.Check.Text = "Incorrect, Continue";
            activeQuestion.Check.Color = "checkIncorrect";
            Results[QuestionCounter] = false;

            // Set Colors for wrong and correct answer buttons
            foreach (AnswerPackage answer in activeQuestion.Answers)
            {
                if (answer.Selected)
                {
                    answer.Color = "wrongAnswer";

                    SelectedAnswerTexts[QuestionCounter] = answer.Text;
                }

                if (answer.Correct)
                {
                    answer.Color = "correctAnswerWouldHaveBeen";
                    CorrectAnswerTexts[QuestionCounter] = answer.Text;
                }
            }

        }

        else if (activeQuestion.CheckSelection() == "error")
        {
            return;
        }
    }


    // Save finished quiz to student if not already completed
    public async void SaveFinishedQuizToStudent()
    {

        // Ensure that student is up-to-date (only necessary for updating finished Quizzes)
        Student = await Http.GetFromJsonAsync<StudentDto>($"api/Students/{1}");

        if (!CheckIfAlreadyCompleted())
        {

            FinishedQuizDto newFinishedQuiz = new FinishedQuizDto();
            newFinishedQuiz.QuizId = CurrentQuiz.QuizId;

            await Http.PutAsJsonAsync<FinishedQuizDto>($"/api/Students/{Student.UserId}/finishQuiz/{CourseId}/{LessonId}/{QuizId}", newFinishedQuiz);

        }
    }


    // UI-compliant wrapped Question
    public class QuestionPackage
    {
        public int ID { get; set; }
        public string Text { get; set; }
        public List<AnswerPackage> Answers { get; set; }

        // Connected CheckButton
        public Check Check { get; set; } = new Check { Text = "Check" };

        public QuestionPackage(QuestionDto question)
        {
            this.ID = question.QuestionId;
            this.Text = question.QuestionText;
            this.Answers = AnswerPackage.TransformAnswers(question.Answers);
        }


        // Wrap QuestionDto set in UI-compliant QuestionPackage set
        public static QuestionPackage[] TransformQuestions(List<QuestionDto> questions)
        {
            List<QuestionPackage> newQuestions = new List<QuestionPackage>();

            foreach (QuestionDto originalQuestion in questions)
            {
                newQuestions.Add(new QuestionPackage(originalQuestion));
            }

            return newQuestions.ToArray();
        }


        // Interaction with answer buttons (Selecting and Unselecting answers and setting Check Button to ready/not ready)
        public void AnythingSelected(AnswerPackage answer)
        {

            // Blocks interaction with answer buttons when the question has already been checked
            if (Check.Color == "checkCorrect" || Check.Color == "checkIncorrect")
            {
                return;
            }

            AnswerPackage clickedAnswer = answer;

            // Check if any other answers than the clicked one are selected and unchecks them
            foreach (var checkedAnswer in Answers)
            {
                if (checkedAnswer != clickedAnswer && checkedAnswer.Selected)
                {
                    checkedAnswer.Pressed();
                }
            }

            // (Un-) Select clicked on answer
            clickedAnswer.Pressed();

            bool selectionTest = false;

            // Check if any answers have been selected
            foreach (var checkedAnswer in Answers)
            {
                if (checkedAnswer.Selected)
                {
                    selectionTest = true;
                }
            }

            // Set Check-Button to ready if an answer is selected or unready if no answer is selected
            if (selectionTest)
            {
                this.Check.SetReady(true);
            }

            else
            {
                this.Check.SetReady(false);
            }
        }


        // Check if selected answer is correct
        public string CheckSelection()
        {
            AnswerPackage selectedAnswer = null;
            bool selectionTest = false;

            foreach (var checkedAnswer in Answers)
            {
                // Get selected answer out of all answers
                if (checkedAnswer.Selected)
                {
                    selectionTest = true;
                    selectedAnswer = checkedAnswer;
                }
            }

            // Evaluation of selected answer
            if (selectionTest && selectedAnswer != null)
            {
                if (selectedAnswer.Correct)
                {
                    return "correct";
                }
                else
                {
                    return "incorrect";
                }
            }
            else
            {
                return "error";
            }
        }
    }


    // UI-compliant wrapped Answer
    public class AnswerPackage
    {
        public int ID { get; set; }
        public string Text { get; set; }
        public bool Correct { get; set; }

        // Status of selection by student
        public bool Selected { get; set; } = false;

        // Reference to active CSS class in UI
        public string Color { get; set; } = "unselected";


        public AnswerPackage(AnswerDto answer)
        {
            this.ID = answer.Id;
            this.Text = answer.AnswerText;
            this.Correct = answer.Correct;
        }

        // Set answer button color to selected or unselected
        public void Pressed()
        {
            this.Selected = !Selected;

            if (this.Selected)
            {
                this.Color = "selected";
            }
            else
            {
                this.Color = "unselected";
            }
        }


        // Wrap AnswerDto set in UI-compliant AnswerPackage set
        public static List<AnswerPackage> TransformAnswers(List<AnswerDto> answers)
        {
            List<AnswerPackage> newAnswers = new List<AnswerPackage>();

            foreach (AnswerDto originalAnswer in answers)
            {
                newAnswers.Add(new AnswerPackage(originalAnswer));
            }

            return newAnswers;
        }
    }


    // UI-compliant wrapped Check button
    public class Check
    {
        public string Text { get; set; }

        // Status if Check Button can be clicked
        public bool Ready { get; set; } = false;

        // Reference to active CSS class in UI
        public string Color { get; set; } = "checkNotReady";

        // Set Check button to ready or unready
        public void SetReady(bool ready)
        {
            this.Ready = ready;

            if (ready == true)
            {
                this.Color = "checkReady";
            }
            else if (ready == false)
            {
                this.Color = "checkNotReady";
            }
        }
    }
}



